user ec2-user www;
worker_processes  2;
events {
  worker_connections 1024;
}

http {
  lua_shared_dict auto_ssl 1m;
  lua_shared_dict auto_ssl_settings 64k;
  resolver 8.8.8.8 ipv6=off;

  init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()
    auto_ssl:set("allow_domain", function(domain)
      return true
    end)
    auto_ssl:init()
  }

  init_worker_by_lua_block {
    auto_ssl:init_worker()
  }

  server {
    listen 443 ssl;



    location / {
        resolver 8.8.8.8;
        set $destination '';
        access_by_lua '
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                -- ngx.log("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            local ok, err, errcode, sqlstate = db:connect{
                host = "db.prd.yoursalespace.com",
                port = 14407,
                database = "cname",
                user = "cnamedbuser",
                password = "4ikEpicO",
                charset = "utf8",
                max_packet_size = 1024 * 1024,
            }
            if not ok then
                -- ngx.log("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                return
            end

            -- ngx.say("connected to mysql.")
            -- run a select query, expected about 10 rows in
            -- the result set:
            -- ngx.log(ngx.var.host)
            res, err, errcode, sqlstate =
                db:query("select * from domains where origin =" .. ngx.quote_sql_str(ngx.var.host), 1)
            if not res then
                -- ngx.log("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                return
            end
            -- ngx.log(ngx.var.destination)
            local cjson = require "cjson"
            -- ngx.log("result: ", cjson.encode(res))
            ngx.var.destination = res[1].destination
            -- ngx.say(ngx.var.destination)
            -- put it into the connection pool of size 100,
            -- with 10 seconds max idle timeout
            local ok, err = db:set_keepalive(10000, 100)
            if not ok then
                -- ngx.log("failed to set keepalive: ", err)
                return
            end
            ';
            proxy_pass $destination;
        }

        ssl_certificate_by_lua_block {
          auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    }
    server {
       listen 80;
       location /.well-known/acme-challenge/ {
         content_by_lua_block {
           auto_ssl:challenge_server()
         }
       }

       location / {
           return 301 https://$host$request_uri;
       }
     }

     server {
       listen 127.0.0.1:8999;
       client_body_buffer_size 128k;
       client_max_body_size 128k;

       location / {
         content_by_lua_block {
           auto_ssl:hook_server()
         }
       }
     }
   }
