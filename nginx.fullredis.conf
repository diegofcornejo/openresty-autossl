user ec2-user www;
worker_processes  2;
events {
  worker_connections 1024;
}

http {
  lua_shared_dict auto_ssl 1m;
  lua_shared_dict auto_ssl_settings 64k;
  resolver 8.8.8.8 ipv6=off;

  init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()
    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
    auto_ssl:set("redis", {
      host = "us1-lucky-cub-30408.lambda.store",
      auth = "8a1145dba12f468e9630495b2ca86d29",
      port = "30408"
    })
    auto_ssl:set("allow_domain", function(domain, auto_ssl)
        local redis_connection = auto_ssl.storage.adapter:get_connection()
        local res  = redis_connection:get(domain)

        if not res then
           return false
        end

        if res == ngx.null then
           return false
         end

        return true
    end)
    auto_ssl:init()
  }

  init_worker_by_lua_block {
    auto_ssl:init_worker()
  }

  server {
    listen 443 ssl;



    location / {
        resolver 8.8.8.8;
        set $destination '';
        access_by_lua '
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeouts(1000, 1000, 1000) -- 1 sec
            local ok, err = red:connect("us1-lucky-cub-30408.lambda.store", 30408)
            if not ok then
                return
            end
            local res, err = red:auth("8a1145dba12f468e9630495b2ca86d29")
            if not res then
                return
            end
            local res, err = red:get(ngx.var.host)
            if not res then
                return
            end
            if res == ngx.null then
                return
            end
            ngx.var.destination = res
            local ok, err = red:set_keepalive(3000, 10)
            if not ok then
                return
            end
            ';
            proxy_pass $destination;
            }

        ssl_certificate_by_lua_block {
          auto_ssl:ssl_certificate()
        }
        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    }
    server {
       listen 80;
       location /.well-known/acme-challenge/ {
         content_by_lua_block {
           auto_ssl:challenge_server()
         }
       }

       location / {
           return 301 https://$host$request_uri;
       }
     }

    server {
        listen 127.0.0.1:8999;
        client_body_buffer_size 128k;
        client_max_body_size 128k;

        location / {
         content_by_lua_block {
           auto_ssl:hook_server()
         }
       }
     }
   }
